generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String     @id @default(uuid())
  name                  String
  email                 String?    @unique
  emailVerified         DateTime?   @map("email_verified")
  image                 String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  accounts              Account[]
  sessions              Session[]
  Game                   Game[]
  @@map("users")
}
model Account {
  id                 String    @id @default(cuid())
  userId              String    @map("user_id")
  type                 String?
  provider           String
  providerAccountId  String    @map("provider_account_id")
  token_type         String?
  refresh_token      String?   
  access_token       String?   
  expires_at         Int?
  scope              String?
  id_token           String? 
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String    @map("session_token") @unique
  accessToken  String?   @map("access_token")
  expires      DateTime
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}


enum GameType{
  mcq
  open_ended
}

model Game{
 id          String    @id @default(cuid())
  userId      String
  timeStarted DateTime  
  topic       String
  timeEnded   DateTime?
  gameType    GameType
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions Question[]
  @@index([userId],name:"userId")
}


model Question{
  id String @id @default(cuid())
  question String
  answer String
  gameId String
  options Json? ///only for mcq questions
  percentageCorrect Float? //for open ended questions
  isCorrect Boolean? ///for mcq questions only
  questionType GameType
  userAnswer String?

  game Game @relation(fields: [gameId],references: [id],onDelete: Cascade)
  @@index([gameId],name:"gameId")
}